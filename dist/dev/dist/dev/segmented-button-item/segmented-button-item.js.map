{"version":3,"sources":["segmented-button-item/segmented-button-item.js"],"names":["bindable","customElement","noView","inject","AttributeManager","getBooleanFromAttributeValue","Ui5Control","Ui5Item","Ui5SegmentedButtonItem","Element","element","_item","attributeManager","defaultFunc","attached","props","width","icon","visible","press","defaultPress","fillProperties","sap","m","SegmentedButtonItem","$","closest","length","au","controller","viewModel","addChild","child","elem","removeChild","iconChanged","newValue","setIcon","visibleChanged","setVisible","widthChanged","setWidth"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,c,sBAAAA,Q;AAAUC,mB,sBAAAA,a;AAAeC,Y,sBAAAA,M;;AACzBC,Y,+BAAAA,M;;AACAC,sB,2BAAAA,gB;;AACAC,kC,qBAAAA,4B;;AACAC,gB,mBAAAA,U;;AACAC,a,aAAAA,O;;;wCAGIC,sB,WAFZP,cAAc,2BAAd,C,UACAE,OAAOM,OAAP,C,UAIET,U,UACAA,U,UACAA,U,UACAA,U,UAGAA,U,UACAA,U,UACAA,U,WACAA,U;;;AAGD,wCAAYU,OAAZ,EAAqB;AAAA;;AAAA,uDACnB,oBAAMA,OAAN,CADmB;;AAAA,gBAdrBC,KAcqB,GAdb,IAca;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAEnB,gBAAKC,gBAAL,GAAwB,IAAIR,gBAAJ,CAAqBM,OAArB,CAAxB;AACA,gBAAKA,OAAL,GAAeA,OAAf;AAHmB;AAIpB;;yCAEDG,W,0BAAc,CAEb,C;;yCACDC,Q,uBAAW;AACT,cAAIC,QAAQ;AACVC,mBAAO,KAAKA,KADF;AAEVC,kBAAM,KAAKA,IAFD;AAGVC,qBAASb,6BAA6B,KAAKa,OAAlC,CAHC;AAIVC,mBAAO,KAAKA,KAAL,IAAc,IAAd,GAAqB,KAAKA,KAA1B,GAAkC,KAAKC;AAJpC,WAAZ;AAMA,6BAAMC,cAAN,YAAqBN,KAArB;AACA,eAAKJ,KAAL,GAAa,IAAIW,IAAIC,CAAJ,CAAMC,mBAAV,CAA8BT,KAA9B,CAAb;;AAEA,cAAIU,EAAE,KAAKf,OAAP,EAAgBgB,OAAhB,CAAwB,iBAAxB,EAA2CC,MAA3C,GAAoD,CAAxD,EAA2D;AACzDF,cAAE,KAAKf,OAAP,EAAgBgB,OAAhB,CAAwB,iBAAxB,EAA2C,CAA3C,EAA8CE,EAA9C,CAAiDC,UAAjD,CAA4DC,SAA5D,CAAsEC,QAAtE,CAA+E,KAAKpB,KAApF,EAA2F,KAAKD,OAAhG;AACD;AACF,S;;yCAEDqB,Q,qBAASC,K,EAAOC,I,EAAM,CACrB,C;;yCACDC,W,wBAAYF,K,EAAOC,I,EAAM,CACxB,C;;yCACDE,W,wBAAYC,Q,EAAU;AACpB,cAAI,KAAKzB,KAAL,KAAe,IAAnB,EAAyB;AACvB,iBAAKA,KAAL,CAAW0B,OAAX,CAAmBD,QAAnB;AACD;AACF,S;;yCACDE,c,2BAAeF,Q,EAAU;AACvB,cAAI,KAAKzB,KAAL,KAAe,IAAnB,EAAyB;AACvB,iBAAKA,KAAL,CAAW4B,UAAX,CAAsBlC,6BAA6B+B,QAA7B,CAAtB;AACD;AACF,S;;yCACDI,Y,yBAAaJ,Q,EAAU;AACrB,eAAKzB,KAAL,CAAW8B,QAAX,CAAoBL,QAApB;AACD,S;;;QAvDyC7B,O;;;iBAGvB,I;;;;;iBACG,I;;;;;iBACF,I;;;;;iBACA,KAAKM,W;;;;;iBAGP,I;;;;;iBACI,I;;;;;iBACH,I;;;;;iBACS,I","file":"../../../segmented-button-item/segmented-button-item.js","sourcesContent":["import { bindable, customElement, noView } from 'aurelia-templating';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\nimport { Ui5Control } from '../control/control';\r\nimport { Ui5Item } from '../item/item';\r\n@customElement('ui5-segmented-button-item')\r\n@inject(Element)\r\nexport class Ui5SegmentedButtonItem extends Ui5Item {\r\n  _item = null;\r\n\r\n  @bindable() icon = null;\r\n  @bindable() visible = true;\r\n  @bindable() width = null;\r\n  @bindable() press = this.defaultFunc;\r\n\r\n  /*from Ui5Item*/\r\n  @bindable() key = null;\r\n  @bindable() enabled = true;\r\n  @bindable() text = null;\r\n  @bindable() textDirection = null;\r\n\r\n\r\n  constructor(element) {\r\n    super(element);\r\n    this.attributeManager = new AttributeManager(element);\r\n    this.element = element;\r\n  }\r\n\r\n  defaultFunc() {\r\n\r\n  }\r\n  attached() {\r\n    var props = {\r\n      width: this.width,\r\n      icon: this.icon,\r\n      visible: getBooleanFromAttributeValue(this.visible),\r\n      press: this.press != null ? this.press : this.defaultPress\r\n    };\r\n    super.fillProperties(props);\r\n    this._item = new sap.m.SegmentedButtonItem(props);\r\n\r\n    if ($(this.element).closest(\"[ui5-container]\").length > 0) {\r\n      $(this.element).closest(\"[ui5-container]\")[0].au.controller.viewModel.addChild(this._item, this.element);\r\n    }\r\n  }\r\n\r\n  addChild(child, elem) {\r\n  }\r\n  removeChild(child, elem) {\r\n  }\r\n  iconChanged(newValue) {\r\n    if (this._item !== null) {\r\n      this._item.setIcon(newValue);\r\n    }\r\n  }\r\n  visibleChanged(newValue) {\r\n    if (this._item !== null) {\r\n      this._item.setVisible(getBooleanFromAttributeValue(newValue));\r\n    }\r\n  }\r\n  widthChanged(newValue) {\r\n    this._item.setWidth(newValue);\r\n  }\r\n\r\n}\r\n"]}