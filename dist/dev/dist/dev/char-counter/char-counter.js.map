{"version":3,"sources":["char-counter/char-counter.js"],"names":["bindable","customAttribute","inject","AttributeManager","MdCharCounter","Element","element","attributeManager","attached","length","parseInt","tagName","toUpperCase","addAttributes","$","characterCounter","find","each","i","el","attr","detached","removeAttributes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,c,sBAAAA,Q;AAAUC,qB,sBAAAA,e;;AACVC,Y,+BAAAA,M;;AACAC,sB,2BAAAA,gB;;;+BAIIC,a,WAFZH,gBAAgB,iBAAhB,C,UACAC,OAAOG,OAAP,C,UAEEL,U;AAED,+BAAYM,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,eAAKA,OAAL,GAAeA,OAAf;AACA,eAAKC,gBAAL,GAAwB,IAAIJ,gBAAJ,CAAqB,KAAKG,OAA1B,CAAxB;AACD;;gCAEDE,Q,uBAAW;AAAA;;AACT,eAAKC,MAAL,GAAcC,SAAS,KAAKD,MAAd,EAAsB,EAAtB,CAAd;;AAIA,cAAI,KAAKH,OAAL,CAAaK,OAAb,CAAqBC,WAArB,OAAuC,OAA3C,EAAoD;AAClD,iBAAKL,gBAAL,CAAsBM,aAAtB,CAAoC,EAAE,UAAU,KAAKJ,MAAjB,EAApC;AACAK,cAAE,KAAKR,OAAP,EAAgBS,gBAAhB;AACD,WAHD,MAGO;AACLD,cAAE,KAAKR,OAAP,EAAgBU,IAAhB,CAAqB,OAArB,EAA8BC,IAA9B,CAAmC,UAACC,CAAD,EAAIC,EAAJ,EAAW;AAAEL,gBAAEK,EAAF,EAAMC,IAAN,CAAW,QAAX,EAAqB,MAAKX,MAA1B;AAAoC,aAApF;AACAK,cAAE,KAAKR,OAAP,EAAgBU,IAAhB,CAAqB,OAArB,EAA8BD,gBAA9B;AACD;AACF,S;;gCAEDM,Q,uBAAW;AACT,eAAKd,gBAAL,CAAsBe,gBAAtB,CAAuC,CAAC,QAAD,CAAvC;AACD,S;;;;;;iBAvBoB,G","file":"../../../char-counter/char-counter.js","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\n\r\n@customAttribute('md-char-counter')\r\n@inject(Element)\r\nexport class MdCharCounter {\r\n  @bindable() length = 120;\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.attributeManager = new AttributeManager(this.element);\r\n  }\r\n\r\n  attached() {\r\n    this.length = parseInt(this.length, 10);\r\n\r\n    // attach to input element explicitly, so this counter can be used on\r\n    // containers (or custom elements like md-input)\r\n    if (this.element.tagName.toUpperCase() === 'INPUT') {\r\n      this.attributeManager.addAttributes({ 'length': this.length });\r\n      $(this.element).characterCounter();\r\n    } else {\r\n      $(this.element).find('input').each((i, el) => { $(el).attr('length', this.length); });\r\n      $(this.element).find('input').characterCounter();\r\n    }\r\n  }\r\n\r\n  detached() {\r\n    this.attributeManager.removeAttributes(['length']);\r\n  }\r\n}\r\n"]}