{"version":3,"sources":["common/attributeManager.js"],"names":["AttributeManager","element","_colorClasses","addedClasses","addedAttributes","addAttributes","attrs","keys","Object","forEach","getAttribute","k","setAttribute","removeAttributes","a","removeAttribute","addClasses","classes","classListHasColor","filter","classList","contains","cc","length","indexOf","c","push","add","removeClasses","remove","splice"],"mappings":"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","file":"../../../common/attributeManager.js","sourcesContent":["/**\r\n * Adds css classes to a given element only if these classes are not already\r\n * present. Keeps a record of css classes which actually have been added.\r\n * This way, they can also be removed in a way which keeps the original classes\r\n * set by the user.\r\n * Most useful in attached() and detached() handlers.\r\n */\r\nexport class AttributeManager {\r\n  _colorClasses = [\r\n    'accent',\r\n    'primary'\r\n  ];\r\n  addedClasses = [];\r\n  addedAttributes = {};\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  addAttributes(attrs) {\r\n    let keys = Object.keys(attrs);\r\n    keys.forEach(k => {\r\n      if (!this.element.getAttribute(k)) {\r\n        this.addedAttributes[k] = attrs[k];\r\n        this.element.setAttribute(k, attrs[k]);\r\n      } else if (this.element.getAttribute(k) !== attrs[k]) {\r\n        this.element.setAttribute(k, attrs[k]);\r\n      }\r\n    });\r\n  }\r\n\r\n  removeAttributes(attrs) {\r\n    if (typeof attrs === 'string') {\r\n      attrs = [attrs];\r\n    }\r\n    attrs.forEach(a => {\r\n      if (this.element.getAttribute(a) && !!this.addedAttributes[a]) {\r\n        this.element.removeAttribute(a);\r\n        this.addedAttributes[a] = null;\r\n        delete this.addedAttributes[a];\r\n      }\r\n    });\r\n  }\r\n\r\n  addClasses(classes) {\r\n    if (typeof classes === 'string') {\r\n      classes = [classes];\r\n    }\r\n    classes.forEach(c => {\r\n      let classListHasColor = this._colorClasses.filter(cc => this.element.classList.contains(cc)).length > 0;\r\n      if (this._colorClasses.indexOf(c) > -1 && classListHasColor) {\r\n        //\r\n      } else {\r\n        if (!this.element.classList.contains(c)) {\r\n          this.addedClasses.push(c);\r\n          this.element.classList.add(c);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  removeClasses(classes) {\r\n    if (typeof classes === 'string') {\r\n      classes = [classes];\r\n    }\r\n    classes.forEach(c => {\r\n      if (this.element.classList.contains(c) && this.addedClasses.indexOf(c) > -1) {\r\n        this.element.classList.remove(c);\r\n        this.addedClasses.splice(this.addedClasses.indexOf(c), 1);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}