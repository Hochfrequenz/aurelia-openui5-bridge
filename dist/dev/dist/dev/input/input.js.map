{"version":3,"sources":["input/input.js"],"names":["bindable","customElement","bindingMode","inject","TaskQueue","getBooleanFromAttributeValue","MdInputUpdateService","fireEvent","MdInput","Element","defaultBindingMode","oneTime","twoWay","element","taskQueue","updateService","_suspendUpdate","controlId","id","blurOnEnter","bind","mdTextArea","mdShowErrortext","mdBlurOnEnter","attached","mdValidate","input","classList","add","mdValidateError","label","setAttribute","mdValidateSuccess","mdPlaceholder","update","mdType","$","siblings","addClass","attachEventHandlers","detached","detachEventHandlers","blur","focus","mdValueChanged","is","trigger","addEventListener","removeEventListener","e","keyCode"],"mappings":"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","file":"../../../input/input.js","sourcesContent":["import {bindable, customElement} from 'aurelia-templating';\nimport {bindingMode} from 'aurelia-binding';\nimport {inject} from 'aurelia-dependency-injection';\nimport {TaskQueue} from 'aurelia-task-queue';\nimport {getBooleanFromAttributeValue} from '../common/attributes';\nimport {MdInputUpdateService} from './input-update-service';\nimport {fireEvent} from '../common/events';\n\n@customElement('md-input')\n@inject(Element, TaskQueue, MdInputUpdateService)\nexport class MdInput {\n  static id = 0;\n\n  @bindable() mdLabel = '';\n  @bindable() mdBlurOnEnter = false;\n  @bindable() mdDisabled = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdPlaceholder = '';\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdTextArea = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdType = 'text';\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdStep = 'any';\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdValidate = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdShowErrortext = true;\n  @bindable() mdValidateError;\n  @bindable() mdValidateSuccess;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdValue = '';\n\n  _suspendUpdate = false;\n\n  constructor(element, taskQueue, updateService) {\n    this.element = element;\n    this.taskQueue = taskQueue;\n    this.controlId = `md-input-${MdInput.id++}`;\n    this.updateService = updateService;\n    this.blurOnEnter = this.blurOnEnter.bind(this);\n  }\n\n  bind() {\n    this.mdTextArea = getBooleanFromAttributeValue(this.mdTextArea);\n    this.mdShowErrortext = getBooleanFromAttributeValue(this.mdShowErrortext);\n    this.mdBlurOnEnter = getBooleanFromAttributeValue(this.mdBlurOnEnter);\n  }\n\n  attached() {\n    if (getBooleanFromAttributeValue(this.mdValidate)) {\n      this.input.classList.add('validate');\n    }\n    if (this.mdValidateError)  {\n      this.label.setAttribute('data-error', this.mdValidateError);\n    }\n    if (this.mdValidateSuccess)  {\n      this.label.setAttribute('data-success', this.mdValidateSuccess);\n    }\n    if (this.mdPlaceholder) {\n      this.input.setAttribute('placeholder', this.mdPlaceholder);\n    }\n    if (this.mdShowErrortext) {\n      this.input.setAttribute('data-show-errortext', this.mdShowErrortext);\n    }\n    this.updateService.update();\n\n    // special case: time inputs are not covered by Materialize\n    if (this.mdType === 'time') {\n      $(this.input).siblings('label').addClass('active');\n    }\n    this.attachEventHandlers();\n  }\n\n  detached() {\n    this.detachEventHandlers();\n  }\n\n  blur() {\n    fireEvent(this.element, 'blur');\n  }\n\n  focus() {\n    fireEvent(this.element, 'focus');\n  }\n\n  mdValueChanged() {\n    if (!$(this.input).is(':focus')) {\n      this.updateService.update();\n    }\n    if (this.mdTextArea) {\n      $(this.input).trigger('autoresize');\n    }\n  }\n\n  attachEventHandlers() {\n    if (this.mdBlurOnEnter) {\n      this.element.addEventListener('keyup', this.blurOnEnter);\n    }\n  }\n\n  detachEventHandlers() {\n    if (this.mdBlurOnEnter) {\n      this.element.removeEventListener('keyup', this.blurOnEnter);\n    }\n  }\n\n  blurOnEnter(e) {\n    if (e.keyCode && e.keyCode === 13) {\n      this.input.blur();\n    }\n  }\n}\n"]}