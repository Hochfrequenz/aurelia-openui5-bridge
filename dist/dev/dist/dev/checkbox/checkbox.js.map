{"version":3,"sources":["checkbox/checkbox.js"],"names":["bindable","customElement","bindingMode","inject","AttributeManager","getBooleanFromAttributeValue","MdCheckbox","Element","defaultBindingMode","twoWay","element","controlId","id","attached","attributeManager","checkbox","mdFilledIn","addClasses","mdChecked","indeterminate","mdDisabled","disabled","detached","removeClasses","mdDisabledChanged","newValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,c,sBAAAA,Q;AAAUC,mB,sBAAAA,a;;AACVC,iB,mBAAAA,W;;AACAC,Y,+BAAAA,M;;AACAC,sB,2BAAAA,gB;;AACAC,kC,qBAAAA,4B;;;4BAKIC,U,WAFZL,cAAc,aAAd,C,UACAE,OAAOI,OAAP,C,UAGEP,SAAS;AACRQ,4BAAoBN,YAAYO;AADxB,OAAT,C,UAGAT,U,UACAA,U,UACAA,U,UACAA,U;AAED,4BAAYU,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,eAAKA,OAAL,GAAeA,OAAf;AACA,eAAKC,SAAL,oBAAgCL,WAAWM,EAAX,EAAhC;AAED;;6BAEDC,Q,uBAAW;AACT,eAAKC,gBAAL,GAAwB,IAAIV,gBAAJ,CAAqB,KAAKW,QAA1B,CAAxB;AACA,cAAIV,6BAA6B,KAAKW,UAAlC,CAAJ,EAAmD;AACjD,iBAAKF,gBAAL,CAAsBG,UAAtB,CAAiC,WAAjC;AACD;AACD,cAAI,KAAKC,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,iBAAKH,QAAL,CAAcI,aAAd,GAA8B,IAA9B;AACD,WAFD,MAEO;AACL,iBAAKJ,QAAL,CAAcI,aAAd,GAA8B,KAA9B;AACD;AACD,cAAId,6BAA6B,KAAKe,UAAlC,CAAJ,EAAmD;AACjD,iBAAKL,QAAL,CAAcM,QAAd,GAAyB,IAAzB;AACD;AAGF,S;;6BAMDC,Q,uBAAW;AACT,eAAKR,gBAAL,CAAsBS,aAAtB,CAAoC,CAAC,WAAD,EAAc,UAAd,CAApC;AAED,S;;6BAcDC,iB,8BAAkBC,Q,EAAU;AAC1B,cAAI,KAAKV,QAAT,EAAmB;AACjB,iBAAKA,QAAL,CAAcM,QAAd,GAAyB,CAAC,CAACI,QAA3B;AACD;AACF,S;;;mBAzDMb,E,GAAK,C","file":"../../../checkbox/checkbox.js","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n// import {fireEvent} from '../common/events';\n\n@customElement('md-checkbox')\n@inject(Element)\nexport class MdCheckbox {\n  static id = 0;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdChecked;\n  @bindable() mdDisabled;\n  @bindable() mdFilledIn;\n  @bindable() mdMatcher;\n  @bindable() mdModel;\n\n  constructor(element) {\n    this.element = element;\n    this.controlId = `md-checkbox-${MdCheckbox.id++}`;\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  attached() {\n    this.attributeManager = new AttributeManager(this.checkbox);\n    if (getBooleanFromAttributeValue(this.mdFilledIn)) {\n      this.attributeManager.addClasses('filled-in');\n    }\n    if (this.mdChecked === null) {\n      this.checkbox.indeterminate = true;\n    } else {\n      this.checkbox.indeterminate = false;\n    }\n    if (getBooleanFromAttributeValue(this.mdDisabled)) {\n      this.checkbox.disabled = true;\n    }\n    // this.checkbox.checked = getBooleanFromAttributeValue(this.mdChecked);\n    // this.checkbox.addEventListener('change', this.handleChange);\n  }\n\n  // blur() {\n  //   fireEvent(this.element, 'blur');\n  // }\n\n  detached() {\n    this.attributeManager.removeClasses(['filled-in', 'disabled']);\n    // this.checkbox.removeEventListener('change', this.handleChange);\n  }\n\n  // handleChange() {\n  //   this.mdChecked = this.checkbox.checked;\n  //   fireEvent(this.element, 'blur');\n  // }\n\n  // mdCheckedChanged(newValue) {\n  //   // if (this.checkbox) {\n  //   //   this.checkbox.checked = !!newValue;\n  //   // }\n  //   fireEvent(this.element, 'blur');\n  // }\n\n  mdDisabledChanged(newValue) {\n    if (this.checkbox) {\n      this.checkbox.disabled = !!newValue;\n    }\n  }\n}\n"]}