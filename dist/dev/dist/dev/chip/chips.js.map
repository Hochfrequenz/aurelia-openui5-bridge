{"version":3,"sources":["chip/chips.js"],"names":["bindable","customAttribute","bindingMode","inject","getLogger","fireEvent","MdChips","Element","defaultBindingMode","twoWay","element","log","onChipAdd","bind","onChipDelete","onChipSelect","attached","options","autocompleteData","data","placeholder","secondaryPlaceholder","$","material_chip","on","detached","e","chip","operation","target"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,c,sBAAAA,Q;AAAUC,qB,sBAAAA,e;;AACVC,iB,mBAAAA,W;;AACAC,Y,+BAAAA,M;;AACAC,e,mBAAAA,S;;AAEAC,e,iBAAAA,S;;;yBAIKC,O,WAFZL,gBAAgB,UAAhB,C,UACAE,OAAOI,OAAP,C,UAEEP,U,UACAA,SAAS,EAAEQ,oBAAoBN,YAAYO,MAAlC,EAAT,C,UACAT,U,UACAA,U;AAED,yBAAYU,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,eAAKA,OAAL,GAAeA,OAAf;AACA,eAAKC,GAAL,GAAWP,UAAU,UAAV,CAAX;;AAEA,eAAKQ,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,eAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,eAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACD;;0BAEDG,Q,uBAAW;AACT,cAAIC,UAAU;AACZC,8BAAkB,KAAKA,gBADX;AAEZC,kBAAM,KAAKA,IAFC;AAGZC,yBAAa,KAAKA,WAHN;AAIZC,kCAAsB,KAAKA;AAJf,WAAd;AAMAC,YAAE,KAAKZ,OAAP,EAAgBa,aAAhB,CAA8BN,OAA9B;AACAK,YAAE,KAAKZ,OAAP,EAAgBc,EAAhB,CAAmB,UAAnB,EAA+B,KAAKZ,SAApC;AACAU,YAAE,KAAKZ,OAAP,EAAgBc,EAAhB,CAAmB,aAAnB,EAAkC,KAAKV,YAAvC;AACAQ,YAAE,KAAKZ,OAAP,EAAgBc,EAAhB,CAAmB,aAAnB,EAAkC,KAAKT,YAAvC;AACD,S;;0BAEDU,Q,uBAAW,CAEV,C;;0BAEDb,S,sBAAUc,C,EAAGC,I,EAAM;AACjB,eAAKR,IAAL,GAAYG,EAAE,KAAKZ,OAAP,EAAgBa,aAAhB,CAA8B,MAA9B,CAAZ;AACAlB,oBAAU,KAAKK,OAAf,EAAwB,QAAxB,EAAkC,EAAEkB,WAAW,KAAb,EAAoBC,QAAQF,IAA5B,EAAkCR,MAAM,KAAKA,IAA7C,EAAlC;AACD,S;;0BACDL,Y,yBAAaY,C,EAAGC,I,EAAM;AACpB,eAAKR,IAAL,GAAYG,EAAE,KAAKZ,OAAP,EAAgBa,aAAhB,CAA8B,MAA9B,CAAZ;AACAlB,oBAAU,KAAKK,OAAf,EAAwB,QAAxB,EAAkC,EAAEkB,WAAW,QAAb,EAAuBC,QAAQF,IAA/B,EAAqCR,MAAM,KAAKA,IAAhD,EAAlC;AACD,S;;0BACDJ,Y,yBAAaW,C,EAAGC,I,EAAM;AACpBtB,oBAAU,KAAKK,OAAf,EAAwB,UAAxB,EAAoC,EAAEmB,QAAQF,IAAV,EAApC;AACD,S;;;;;;iBAzC8B,E;;;;;iBAC8B,E;;;;;iBACnC,E;;;;;iBACS,E","file":"../../../chip/chips.js","sourcesContent":["import {bindable, customAttribute} from 'aurelia-templating';\nimport {bindingMode} from 'aurelia-binding';\nimport {inject} from 'aurelia-dependency-injection';\nimport {getLogger} from 'aurelia-logging';\n\nimport {fireEvent} from '../common/events';\n\n@customAttribute('md-chips')\n@inject(Element)\nexport class MdChips {\n  @bindable() autocompleteData = {};\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) data = [];\n  @bindable() placeholder = '';\n  @bindable() secondaryPlaceholder = '';\n\n  constructor(element) {\n    this.element = element;\n    this.log = getLogger('md-chips');\n\n    this.onChipAdd = this.onChipAdd.bind(this);\n    this.onChipDelete = this.onChipDelete.bind(this);\n    this.onChipSelect = this.onChipSelect.bind(this);\n  }\n\n  attached() {\n    let options = {\n      autocompleteData: this.autocompleteData,\n      data: this.data,\n      placeholder: this.placeholder,\n      secondaryPlaceholder: this.secondaryPlaceholder\n    };\n    $(this.element).material_chip(options);\n    $(this.element).on('chip.add', this.onChipAdd);\n    $(this.element).on('chip.delete', this.onChipDelete);\n    $(this.element).on('chip.select', this.onChipSelect);\n  }\n\n  detached() {\n    //\n  }\n\n  onChipAdd(e, chip) {\n    this.data = $(this.element).material_chip('data');\n    fireEvent(this.element, 'change', { operation: 'add', target: chip, data: this.data });\n  }\n  onChipDelete(e, chip) {\n    this.data = $(this.element).material_chip('data');\n    fireEvent(this.element, 'change', { operation: 'delete', target: chip, data: this.data });\n  }\n  onChipSelect(e, chip) {\n    fireEvent(this.element, 'selected', { target: chip });\n  }\n}\n"]}