{"version":3,"sources":["segmented-button/segmented-button.js"],"names":["bindable","customElement","noView","inject","AttributeManager","getBooleanFromAttributeValue","Ui5SegmentedButton","Element","defaultFunc","element","_button","attributeManager","addChild","child","elem","path","jQuery","makeArray","$","parentsUntil","localName","getItems","length","selectedKey","mProperties","key","addItem","attached","sap","m","SegmentedButton","enabled","width","select","that","closest","au","controller","viewModel","addAttributes","attachSelect","event","mParameters","detached","enableChanged","newValue","setEnabled","widthChanged","setWidth","selectedKeyChanged","setSelectedKey"],"mappings":"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","file":"../../../segmented-button/segmented-button.js","sourcesContent":["import { bindable, customElement, noView } from 'aurelia-templating';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\n\r\n@customElement('ui5-segmented-button')\r\n@inject(Element)\r\nexport class Ui5SegmentedButton {\r\n  @bindable() enabled = false;\r\n  @bindable() width = null;\r\n  @bindable() selectedKey = null;\r\n  @bindable() select = this.defaultFunc;\r\n  _button = null;\r\n  defaultFunc() {\r\n\r\n  }\r\n  constructor(element) {\r\n    this.attributeManager = new AttributeManager(element);\r\n    this.element = element;\r\n  }\r\n  get UIElement() {\r\n    return this._button;\r\n  }\r\n  addChild(child, elem) {\r\n    var path = jQuery.makeArray($(elem).parentsUntil(this.element));\r\n    for (elem of path) {\r\n      if (elem.localName == 'item') {\r\n        if (this._button.getItems().length == 0) // set key when first item is added\r\n          this.selectedKey = child.mProperties.key;\r\n        this._button.addItem(child);\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  attached() {\r\n    this._button = new sap.m.SegmentedButton({\r\n      enabled: !getBooleanFromAttributeValue(this.enabled),\r\n      width: this.width,\r\n      selectedKey: this.selectedKey,\r\n      select: this.select\r\n    });\r\n    var that = this;\r\n    if ($(this.element).closest(\"[ui5-container]\").length > 0) {\r\n      $(this.element).closest(\"[ui5-container]\")[0].au.controller.viewModel.addChild(this._button, this.element);\r\n      this.attributeManager.addAttributes({ \"ui5-container\": '' });\r\n    }\r\n    this._button.attachSelect((event) => {\r\n      that.selectedKey = event.mParameters.key;\r\n    });\r\n\r\n  }\r\n  detached() {\r\n\r\n  }\r\n  enableChanged(newValue) {\r\n    if (this._button !== null) {\r\n      this._button.setEnabled(!getBooleanFromAttributeValue(newValue));\r\n    }\r\n  }\r\n  widthChanged(newValue) {\r\n    if (this._button !== null) {\r\n      this._button.setWidth(newValue);\r\n    }\r\n  }\r\n  selectedKeyChanged(newValue) {\r\n    if (this._button !== null) {\r\n      this._button.setSelectedKey(newValue);\r\n    }\r\n  }\r\n\r\n}\r\n"]}