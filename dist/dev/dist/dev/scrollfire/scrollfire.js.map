{"version":3,"sources":["scrollfire/scrollfire.js"],"names":["customAttribute","inject","getLogger","MdScrollfire","Element","element","targetId","log","attached","targets","$","length","debug","self","options","each","i","el","target","attr","push","selector","callback","get","au","viewModel","offset","parseInt","Materialize","scrollFire"],"mappings":";;;;;;;;;;;;;;;AAASA,qB,sBAAAA,e;;AACAC,Y,+BAAAA,M;;AACAC,e,mBAAAA,S;;;8BAIIC,Y,WAFZH,gBAAgB,eAAhB,C,UACAC,OAAOG,OAAP,C;AAGC,8BAAYC,OAAZ,EAAqB;AAAA;;AAAA,eADrBC,QACqB,GADV,CACU;;AACnB,eAAKD,OAAL,GAAeA,OAAf;AACA,eAAKE,GAAL,GAAWL,UAAU,eAAV,CAAX;AACD;;+BAEDM,Q,uBAAW;AAAA;;AACT,cAAIC,UAAUC,EAAE,wBAAF,EAA4B,KAAKL,OAAjC,CAAd;AACA,cAAII,QAAQE,MAAR,GAAiB,CAArB,EAAwB;AAAA;AACtB,oBAAKJ,GAAL,CAASK,KAAT,CAAe,SAAf,EAA0BH,OAA1B;AACA,kBAAII,YAAJ;AACA,kBAAIC,UAAU,EAAd;AACAL,sBAAQM,IAAR,CAAa,UAACC,CAAD,EAAIC,EAAJ,EAAW;AACtB,oBAAIC,SAASR,EAAEO,EAAF,CAAb;AACA,oBAAI,CAACC,OAAOC,IAAP,CAAY,IAAZ,CAAL,EAAwB;AACtBD,yBAAOC,IAAP,CAAY,IAAZ,4BAA0CN,KAAKP,QAAL,EAA1C;AACD;AACDQ,wBAAQM,IAAR,CAAa;AACXC,4BAAU,MAAMH,OAAOC,IAAP,CAAY,IAAZ,CADL;AAEXG,4BAAUJ,OAAOK,GAAP,CAAW,CAAX,EAAcC,EAAd,CAAiB,sBAAjB,EAAyCC,SAAzC,CAAmDH,QAFlD;AAGXI,0BAAQC,SAAST,OAAOK,GAAP,CAAW,CAAX,EAAcC,EAAd,CAAiB,sBAAjB,EAAyCC,SAAzC,CAAmDC,MAA5D,EAAoE,EAApE;AAHG,iBAAb;AAKD,eAVD;AAWA,kBAAIZ,QAAQH,MAAR,GAAiB,CAArB,EAAwB;AACtB,sBAAKJ,GAAL,CAASK,KAAT,CAAe,4CAAf,EAA6DE,OAA7D;AACAc,4BAAYC,UAAZ,CAAuBf,OAAvB;AACD;AAlBqB;AAmBvB;AACF,S","file":"../../../scrollfire/scrollfire.js","sourcesContent":["import { customAttribute } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { getLogger } from 'aurelia-logging';\n\n@customAttribute('md-scrollfire')\n@inject(Element)\nexport class MdScrollfire {\n  targetId = 0;\n  constructor(element) {\n    this.element = element;\n    this.log = getLogger('md-scrollfire');\n  }\n\n  attached() {\n    let targets = $('[md-scrollfire-target]', this.element);\n    if (targets.length > 0) {\n      this.log.debug('targets', targets);\n      let self = this;\n      let options = [];\n      targets.each((i, el) => {\n        let target = $(el);\n        if (!target.attr('id')) {\n          target.attr('id', `md-scrollfire-target-${self.targetId++}`);\n        }\n        options.push({\n          selector: '#' + target.attr('id'),\n          callback: target.get(0).au['md-scrollfire-target'].viewModel.callback,\n          offset: parseInt(target.get(0).au['md-scrollfire-target'].viewModel.offset, 10)\n        });\n      });\n      if (options.length > 0) {\n        this.log.debug('configuring scrollFire with these options:', options);\n        Materialize.scrollFire(options);\n      }\n    }\n  }\n}\n"]}